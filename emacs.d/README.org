* Essentials
** Package Manager
   #+begin_src emacs-lisp :tangle yes
     (require 'package)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
     (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")) (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
     (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
     (setq package-enable-at-startup nil)
     (package-initialize)
     (setq package-check-signature nil)

     (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+end_src
** Essential Settings
*** Misc Settings
    #+begin_src emacs-lisp :tangle yes
      (setq inhibit-splash-screen t
            inhibit-startup-message t
            inhibit-startup-echo-area-message "wolfe")
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-mode -1)
      (show-paren-mode t)
      (setq initial-scratch-message "")
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq-default indent-tabs-mode nil)
      (delete-selection-mode 1)
      (when (member "Hack" (font-family-list))
        (add-to-list 'default-frame-alist '(font . "Hack-10" ))
        (set-face-attribute 'default t :font "Hack-10"))
    #+end_src
*** Autosave & Backup
    #+begin_src emacs-lisp :tangle yes
      (setq auto-save-file-name-transforms
            `((".*" ,"~/.emacs-backups")))

      (setq backup-directory-alist
            `((".*" . ,"~/.emacs-backups")))
    #+end_src
*** Default Programs
    #+begin_src emacs-lisp :tangle yes
      ;; Change default browser
      (setq browse-url-browser-function 'eaf-open-browser)
      (defalias 'browse-web #'eaf-open-browser)
    #+end_src
*** Theme
    #+begin_src emacs-lisp :tangle yes
      (use-package doom-themes
        :config
        ;; Global settings (defaults)
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled
        (load-theme 'doom-one t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)

        ;; neotree
        (doom-themes-neotree-config)

        ;; or for treemacs users
        (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
        (doom-themes-treemacs-config)

        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config))

      (use-package doom-modeline
        :ensure t
        :hook (after-init . doom-modeline-mode)
        :config
        (setq doom-modeline-minor-modes t)
        (setq doom-modeline-modal-icon t))
    #+end_src
* Evil
** Base Config
   #+begin_src emacs-lisp :tangle yes
     (use-package evil
       :init ()
       :config
       (evil-mode 1)
       (add-to-list 'evil-emacs-state-modes 'eaf-mode))
   #+end_src
* Org
** Base Config
   #+begin_src emacs-lisp :tangle yes
     (org-display-inline-images t)
     (setq org-log-done 'time)
     (setq org-image-actual-width nil)
     (setq org-todo-keywords
           '((sequence "TODO" "STARTED" "WAITING" "|" "DONE" "CANCELED")))

     ;; language support for org
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (haskell . t)))

     ;; org agenda
     (setq org-agenda-files (list "~/Dropbox/everything.org"))
   #+end_src
** Org Bullets
   #+begin_src emacs-lisp :tangle yes
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src
** Org Download
   #+begin_src emacs-lisp :tangle yes
     ;; allows for drag and drop images
     (use-package org-download
       :config
       (add-hook 'dired-mode-hook 'org-download-enable)
       (setq-default org-download-image-dir "./img"))
   #+end_src
* EAF
  #+begin_src emacs-lisp :tangle yes
    (use-package eaf
      :load-path "~/.emacs.d/submodules/emacs-application-framework")

    (use-package htmlize)
  #+end_src
* Packages
  [[https://github.com/emacs-helm/helm][Helm]]: A useful fuzzy search framework
  #+begin_src emacs-lisp :tangle yes
    (use-package helm
      :bind (("M-x" . helm-M-x)
             ("C-x C-f" . helm-find-files)
             ("C-x b" . helm-buffers-list))
      :config(setq helm-mode-fuzzy-match t))
  #+end_src

  [[http://company-mode.github.io/][Company]]: An autocompletion framework
  #+begin_src emacs-lisp :tangle yes
    (use-package company
      :init
      (global-company-mode)
      :config
      (setq company-minimum-prefix-length 1))

    (use-package company-quickhelp
      :init
      (company-quickhelp-mode))
  #+end_src

  [[http://company-mode.github.io/][Magit]]: A Git Porcelain inside emacs
  #+begin_src emacs-lisp :tangle yes
    ;; Magit
    (use-package magit
      :config
      (global-set-key (kbd "C-x g") 'magit-status))

    ;; evil-magit
    (use-package evil-magit)
  #+end_src

  [[https://github.com/flycheck/flycheck][Flycheck]]: Syntax Checking
  #+begin_src emacs-lisp :tangle yes
    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))
  #+end_src

  all-the-icons
  #+begin_src emacs-lisp :tangle yes
    (use-package all-the-icons)
  #+end_src

  Neotree
  #+begin_src emacs-lisp :tangle yes
    (use-package neotree
      :ensure t
      :config
      (global-set-key [f8] 'neotree-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
      (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
      (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
      (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
      (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
      (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle))
  #+end_src

  [[https://github.com/jaypei/emacs-neotree][NeoTree]]: in-frame file browser similar to NERDTree
  #+begin_src emacs-lisp :tangle yes
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-display-in-side-window        t
              treemacs-eldoc-display                 t
              treemacs-file-event-delay              5000
              treemacs-file-follow-delay             0.2
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-missing-project-action        'ask
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                      'left
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-desc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-width                         35)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-evil
      :after treemacs evil
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))

    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
  #+end_src
* Language Support
** C/C++
  #+begin_src emacs-lisp :tangle yes
    (use-package helm-gtags)
    (use-package irony
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

    (use-package company-irony
      :config
      (add-to-list 'company-backends 'company-irony))

    (use-package flycheck-irony
      :config
      (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
  #+end_src
** Python
  #+begin_src emacs-lisp :tangle yes
    (use-package elpy
      :ensure t
      :init
      (elpy-enable))
  #+end_src
** Haskell
  #+begin_src emacs-lisp :tangle yes
    ;; haskell
    (use-package haskell-mode)
    (use-package intero
      :config
      (add-hook 'haskell-mode-hook 'intero-mode))
  #+end_src
* Fun
  snow.el
  #+begin_src emacs-lisp :tangle yes
    (load "~/.emacs.d/lisp/snow.el")
  #+end_src
